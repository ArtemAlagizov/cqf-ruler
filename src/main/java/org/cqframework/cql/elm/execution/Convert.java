//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.09.14 at 02:28:55 PM MDT 
//


package org.cqframework.cql.elm.execution;

import java.util.Collection;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * The Convert operator converts a value to a specific type. The result of the operator is the value of the argument converted to the target type, if possible. Note that use of this operator may result in a run-time exception being thrown if there is no valid conversion from the actual value to the target type.
 * 
 * This operator supports conversion between String and each of Boolean, Integer, Decimal, Quantity, DateTime, and Time, as well as conversion from Integer to Decimal and from Code to Concept.
 * 
 * Conversion between String and DateTime/Time is performed using the ISO-8601 standard format: YYYY-MM-DDThh:mm:ss(+|-)hh:mm.
 * 
 * <p>Java class for Convert complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Convert"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:hl7-org:elm:r1}UnaryExpression"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="toTypeSpecifier" type="{urn:hl7-org:elm:r1}TypeSpecifier" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="toType" type="{http://www.w3.org/2001/XMLSchema}QName" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Convert", namespace = "urn:hl7-org:elm:r1", propOrder = {
    "toTypeSpecifier"
})
public class Convert
    extends UnaryExpression
    implements Equals, HashCode, ToString
{

    @XmlElement(namespace = "urn:hl7-org:elm:r1")
    protected TypeSpecifier toTypeSpecifier;
    @XmlAttribute(name = "toType")
    protected QName toType;

    /**
     * Gets the value of the toTypeSpecifier property.
     * 
     * @return
     *     possible object is
     *     {@link TypeSpecifier }
     *     
     */
    public TypeSpecifier getToTypeSpecifier() {
        return toTypeSpecifier;
    }

    /**
     * Sets the value of the toTypeSpecifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link TypeSpecifier }
     *     
     */
    public void setToTypeSpecifier(TypeSpecifier value) {
        this.toTypeSpecifier = value;
    }

    /**
     * Gets the value of the toType property.
     * 
     * @return
     *     possible object is
     *     {@link QName }
     *     
     */
    public QName getToType() {
        return toType;
    }

    /**
     * Sets the value of the toType property.
     * 
     * @param value
     *     allowed object is
     *     {@link QName }
     *     
     */
    public void setToType(QName value) {
        this.toType = value;
    }

    public Convert withToTypeSpecifier(TypeSpecifier value) {
        setToTypeSpecifier(value);
        return this;
    }

    public Convert withToType(QName value) {
        setToType(value);
        return this;
    }

    @Override
    public Convert withOperand(Expression value) {
        setOperand(value);
        return this;
    }

    @Override
    public Convert withAnnotation(Object... values) {
        if (values!= null) {
            for (Object value: values) {
                getAnnotation().add(value);
            }
        }
        return this;
    }

    @Override
    public Convert withAnnotation(Collection<Object> values) {
        if (values!= null) {
            getAnnotation().addAll(values);
        }
        return this;
    }

    @Override
    public Convert withLocalId(String value) {
        setLocalId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Convert)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Convert that = ((Convert) object);
        {
            TypeSpecifier lhsToTypeSpecifier;
            lhsToTypeSpecifier = this.getToTypeSpecifier();
            TypeSpecifier rhsToTypeSpecifier;
            rhsToTypeSpecifier = that.getToTypeSpecifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "toTypeSpecifier", lhsToTypeSpecifier), LocatorUtils.property(thatLocator, "toTypeSpecifier", rhsToTypeSpecifier), lhsToTypeSpecifier, rhsToTypeSpecifier)) {
                return false;
            }
        }
        {
            QName lhsToType;
            lhsToType = this.getToType();
            QName rhsToType;
            rhsToType = that.getToType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "toType", lhsToType), LocatorUtils.property(thatLocator, "toType", rhsToType), lhsToType, rhsToType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TypeSpecifier theToTypeSpecifier;
            theToTypeSpecifier = this.getToTypeSpecifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "toTypeSpecifier", theToTypeSpecifier), currentHashCode, theToTypeSpecifier);
        }
        {
            QName theToType;
            theToType = this.getToType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "toType", theToType), currentHashCode, theToType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            TypeSpecifier theToTypeSpecifier;
            theToTypeSpecifier = this.getToTypeSpecifier();
            strategy.appendField(locator, this, "toTypeSpecifier", buffer, theToTypeSpecifier);
        }
        {
            QName theToType;
            theToType = this.getToType();
            strategy.appendField(locator, this, "toType", buffer, theToType);
        }
        return buffer;
    }

}
