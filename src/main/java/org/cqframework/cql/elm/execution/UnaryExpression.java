//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.09.14 at 02:28:55 PM MDT 
//


package org.cqframework.cql.elm.execution;

import java.util.Collection;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * The UnaryExpression type defines the abstract base type for expressions that take a single argument.
 * 
 * <p>Java class for UnaryExpression complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="UnaryExpression"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:hl7-org:elm:r1}Expression"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="operand" type="{urn:hl7-org:elm:r1}Expression"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "UnaryExpression", namespace = "urn:hl7-org:elm:r1", propOrder = {
    "operand"
})
@XmlSeeAlso({
    Not.class,
    IsNull.class,
    IsTrue.class,
    IsFalse.class,
    Is.class,
    As.class,
    Convert.class,
    ToBoolean.class,
    ToConcept.class,
    ToDateTime.class,
    ToDecimal.class,
    ToInteger.class,
    ToQuantity.class,
    org.cqframework.cql.elm.execution.ToString.class,
    ToTime.class,
    Ceiling.class,
    Floor.class,
    Truncate.class,
    Abs.class,
    Negate.class,
    Ln.class,
    Exp.class,
    Successor.class,
    Predecessor.class,
    Length.class,
    Upper.class,
    Lower.class,
    DateFrom.class,
    TimeFrom.class,
    TimezoneFrom.class,
    DateTimeComponentFrom.class,
    Width.class,
    Start.class,
    End.class,
    Collapse.class,
    Exists.class,
    Flatten.class,
    Distinct.class,
    SingletonFrom.class,
    CalculateAge.class
})
public abstract class UnaryExpression
    extends Expression
    implements Equals, HashCode, org.jvnet.jaxb2_commons.lang.ToString
{

    @XmlElement(namespace = "urn:hl7-org:elm:r1", required = true)
    protected Expression operand;

    /**
     * Gets the value of the operand property.
     * 
     * @return
     *     possible object is
     *     {@link Expression }
     *     
     */
    public Expression getOperand() {
        return operand;
    }

    /**
     * Sets the value of the operand property.
     * 
     * @param value
     *     allowed object is
     *     {@link Expression }
     *     
     */
    public void setOperand(Expression value) {
        this.operand = value;
    }

    public UnaryExpression withOperand(Expression value) {
        setOperand(value);
        return this;
    }

    @Override
    public UnaryExpression withAnnotation(Object... values) {
        if (values!= null) {
            for (Object value: values) {
                getAnnotation().add(value);
            }
        }
        return this;
    }

    @Override
    public UnaryExpression withAnnotation(Collection<Object> values) {
        if (values!= null) {
            getAnnotation().addAll(values);
        }
        return this;
    }

    @Override
    public UnaryExpression withLocalId(String value) {
        setLocalId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof UnaryExpression)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final UnaryExpression that = ((UnaryExpression) object);
        {
            Expression lhsOperand;
            lhsOperand = this.getOperand();
            Expression rhsOperand;
            rhsOperand = that.getOperand();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operand", lhsOperand), LocatorUtils.property(thatLocator, "operand", rhsOperand), lhsOperand, rhsOperand)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Expression theOperand;
            theOperand = this.getOperand();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operand", theOperand), currentHashCode, theOperand);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Expression theOperand;
            theOperand = this.getOperand();
            strategy.appendField(locator, this, "operand", buffer, theOperand);
        }
        return buffer;
    }

}
