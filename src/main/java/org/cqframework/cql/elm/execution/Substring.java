//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.09.14 at 02:28:55 PM MDT 
//


package org.cqframework.cql.elm.execution;

import java.util.Collection;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * The Substring operator returns the string within stringToSub, starting at the 0-based index startIndex, and consisting of length characters.
 * 			
 * If length is ommitted, the substring returned starts at startIndex and continues to the end of stringToSub.
 * 
 * If stringToSub or startIndex is null, or startIndex is out of range, the result is null.
 * 
 * <p>Java class for Substring complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Substring"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:hl7-org:elm:r1}Expression"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="stringToSub" type="{urn:hl7-org:elm:r1}Expression"/&gt;
 *         &lt;element name="startIndex" type="{urn:hl7-org:elm:r1}Expression"/&gt;
 *         &lt;element name="length" type="{urn:hl7-org:elm:r1}Expression" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Substring", namespace = "urn:hl7-org:elm:r1", propOrder = {
    "stringToSub",
    "startIndex",
    "length"
})
public class Substring
    extends Expression
    implements Equals, HashCode, ToString
{

    @XmlElement(namespace = "urn:hl7-org:elm:r1", required = true)
    protected Expression stringToSub;
    @XmlElement(namespace = "urn:hl7-org:elm:r1", required = true)
    protected Expression startIndex;
    @XmlElement(namespace = "urn:hl7-org:elm:r1")
    protected Expression length;

    /**
     * Gets the value of the stringToSub property.
     * 
     * @return
     *     possible object is
     *     {@link Expression }
     *     
     */
    public Expression getStringToSub() {
        return stringToSub;
    }

    /**
     * Sets the value of the stringToSub property.
     * 
     * @param value
     *     allowed object is
     *     {@link Expression }
     *     
     */
    public void setStringToSub(Expression value) {
        this.stringToSub = value;
    }

    /**
     * Gets the value of the startIndex property.
     * 
     * @return
     *     possible object is
     *     {@link Expression }
     *     
     */
    public Expression getStartIndex() {
        return startIndex;
    }

    /**
     * Sets the value of the startIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link Expression }
     *     
     */
    public void setStartIndex(Expression value) {
        this.startIndex = value;
    }

    /**
     * Gets the value of the length property.
     * 
     * @return
     *     possible object is
     *     {@link Expression }
     *     
     */
    public Expression getLength() {
        return length;
    }

    /**
     * Sets the value of the length property.
     * 
     * @param value
     *     allowed object is
     *     {@link Expression }
     *     
     */
    public void setLength(Expression value) {
        this.length = value;
    }

    public Substring withStringToSub(Expression value) {
        setStringToSub(value);
        return this;
    }

    public Substring withStartIndex(Expression value) {
        setStartIndex(value);
        return this;
    }

    public Substring withLength(Expression value) {
        setLength(value);
        return this;
    }

    @Override
    public Substring withAnnotation(Object... values) {
        if (values!= null) {
            for (Object value: values) {
                getAnnotation().add(value);
            }
        }
        return this;
    }

    @Override
    public Substring withAnnotation(Collection<Object> values) {
        if (values!= null) {
            getAnnotation().addAll(values);
        }
        return this;
    }

    @Override
    public Substring withLocalId(String value) {
        setLocalId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Substring)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Substring that = ((Substring) object);
        {
            Expression lhsStringToSub;
            lhsStringToSub = this.getStringToSub();
            Expression rhsStringToSub;
            rhsStringToSub = that.getStringToSub();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stringToSub", lhsStringToSub), LocatorUtils.property(thatLocator, "stringToSub", rhsStringToSub), lhsStringToSub, rhsStringToSub)) {
                return false;
            }
        }
        {
            Expression lhsStartIndex;
            lhsStartIndex = this.getStartIndex();
            Expression rhsStartIndex;
            rhsStartIndex = that.getStartIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startIndex", lhsStartIndex), LocatorUtils.property(thatLocator, "startIndex", rhsStartIndex), lhsStartIndex, rhsStartIndex)) {
                return false;
            }
        }
        {
            Expression lhsLength;
            lhsLength = this.getLength();
            Expression rhsLength;
            rhsLength = that.getLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "length", lhsLength), LocatorUtils.property(thatLocator, "length", rhsLength), lhsLength, rhsLength)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Expression theStringToSub;
            theStringToSub = this.getStringToSub();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stringToSub", theStringToSub), currentHashCode, theStringToSub);
        }
        {
            Expression theStartIndex;
            theStartIndex = this.getStartIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startIndex", theStartIndex), currentHashCode, theStartIndex);
        }
        {
            Expression theLength;
            theLength = this.getLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "length", theLength), currentHashCode, theLength);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Expression theStringToSub;
            theStringToSub = this.getStringToSub();
            strategy.appendField(locator, this, "stringToSub", buffer, theStringToSub);
        }
        {
            Expression theStartIndex;
            theStartIndex = this.getStartIndex();
            strategy.appendField(locator, this, "startIndex", buffer, theStartIndex);
        }
        {
            Expression theLength;
            theLength = this.getLength();
            strategy.appendField(locator, this, "length", buffer, theLength);
        }
        return buffer;
    }

}
