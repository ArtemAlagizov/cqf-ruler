{
  "resourceType": "Library",
  "id": "OpioidCdsStu3",
  "version": "0.1.0",
  "type": {
    "coding": [
      {
        "code": "logic-library"
      }
    ]
  },
  "status": "draft",
  "content": [
    {
      "contentType": "text/cql",
      "data": "bGlicmFyeSBPcGlvaWRDRFNfU1RVMyB2ZXJzaW9uICcwLjEuMCcNCg0KdXNpbmcgRkhJUiB2ZXJzaW9uICczLjAuMCcNCg0KaW5jbHVkZSBPTVRLTG9naWMgdmVyc2lvbiAnMC4xLjAnIGNhbGxlZCBPTVRLTG9naWMNCg0KcGFyYW1ldGVyIFVzZXJJRCBTdHJpbmcNCnBhcmFtZXRlciBPcmRlcnMgTGlzdDxNZWRpY2F0aW9uUmVxdWVzdD4NCg0KY29udGV4dCBQYXRpZW50DQoNCi8vIE5PVEU6IFRoZXNlIGZ1bmN0aW9ucyBoYXZlIGJlZW4gbW92ZWQgaGVyZSBmcm9tIHRoZSBGSElSSGVscGVycyBTVFUzIGxpYnJhcnkgdG8gYm9vc3QgcGVyZm9ybWFuY2UNCmRlZmluZSBmdW5jdGlvbiBUb0NvZGUoY29kaW5nIEZISVIuQ29kaW5nKToNCiAgICBTeXN0ZW0uQ29kZSB7DQogICAgICBjb2RlOiBjb2RpbmcuY29kZS52YWx1ZSwNCiAgICAgIHN5c3RlbTogY29kaW5nLnN5c3RlbS52YWx1ZSwNCiAgICAgIHZlcnNpb246IGNvZGluZy52ZXJzaW9uLnZhbHVlLA0KICAgICAgZGlzcGxheTogY29kaW5nLmRpc3BsYXkudmFsdWUNCiAgICB9DQoNCmRlZmluZSBmdW5jdGlvbiBUb1F1YW50aXR5KHF1YW50aXR5IEZISVIuUXVhbnRpdHkpOg0KICAgIFN5c3RlbS5RdWFudGl0eSB7IHZhbHVlOiBxdWFudGl0eS52YWx1ZS52YWx1ZSwgdW5pdDogcXVhbnRpdHkudW5pdC52YWx1ZSB9DQoNCi8vIElzRm9yQ2hyb25pY1BhaW4NCi8vIFRPRE86IENhcHR1cmUgcHJvY2VzcyBkZWNpc2lvbnMgZm9yIGxvbmctdGVybSBvcGlvaWQgdXNlDQpkZWZpbmUgSXNGb3JDaHJvbmljUGFpbjogdHJ1ZQ0KDQovLyBIYXNNZXRhc3RhdGljQ2FuY2VyDQovLyBUT0RPOiBDYXB0dXJlIHByb2Nlc3MgZGVjaXNpb25zIGZvciBtZXRhc3RhdGljIGNhbmNlcg0KZGVmaW5lIEhhc01ldGFzdGF0aWNDYW5jZXI6IGZhbHNlDQoNCi8vIFByZXNjcmlwdGlvbnM6IHJ4Tm9ybUNvZGUsIGlzRHJhZnQsIGlzUFJOLCBwcmVzY3JpcHRpb24gU3RyaW5nLCBkb3NlIFF1YW50aXR5LCBkb3Nlc1BlckRheSBEZWNpbWFsDQpkZWZpbmUgUHJlc2NyaXB0aW9uczoNCiAgT3JkZXJzIE8NCiAgICBsZXQNCiAgICAgIC8vIE5PVEU6IEFzc3VtaW5nIG1lZGljYXRpb24gaXMgc3BlY2lmaWVkIGFzIGEgQ29kZWFibGVDb25jZXB0IHdpdGggYSBzaW5nbGUgUnhOb3JtIGNvZGUNCiAgICAgIHJ4Tm9ybUNvZGU6IFRvQ29kZShPLm1lZGljYXRpb24uY29kaW5nWzBdKSwNCiAgICAgIG1lZGljYXRpb25OYW1lOiBPTVRLTG9naWMuR2V0TWVkaWNhdGlvbk5hbWUocnhOb3JtQ29kZSksDQogICAgICAvLyBOT1RFOiBBc3N1bWluZyBhIHNpbmdsZSBkb3NhZ2UgaW5zdHJ1Y3Rpb24gZWxlbWVudA0KICAgICAgZG9zYWdlSW5zdHJ1Y3Rpb246IE8uZG9zYWdlSW5zdHJ1Y3Rpb25bMF0sDQogICAgICByZXBlYXQ6IGRvc2FnZUluc3RydWN0aW9uLnRpbWluZy5yZXBlYXQsDQogICAgICBmcmVxdWVuY3k6IENvYWxlc2NlKHJlcGVhdC5mcmVxdWVuY3lNYXgudmFsdWUsIHJlcGVhdC5mcmVxdWVuY3kudmFsdWUpLA0KICAgICAgcGVyaW9kOiBTeXN0ZW0uUXVhbnRpdHkgeyB2YWx1ZTogcmVwZWF0LnBlcmlvZC52YWx1ZSwgdW5pdDogcmVwZWF0LnBlcmlvZFVuaXQudmFsdWUgfSwNCiAgICAgIGRvc2VEZXNjcmlwdGlvbjoNCiAgICAgICAgQ29hbGVzY2UoDQogICAgICAgICAgLy8gVGhlcmUgc2hvdWxkIGJlIGEgY29udmVyc2lvbiBmcm9tIEZISVIuU2ltcGxlUXVhbnRpdHkgdG8gU3lzdGVtLlF1YW50aXR5DQogICAgICAgICAgaWYgZG9zYWdlSW5zdHJ1Y3Rpb24uZG9zZSBpcyBGSElSLlJhbmdlDQogICAgICAgICAgICB0aGVuIFRvU3RyaW5nKFRvUXVhbnRpdHkoZG9zYWdlSW5zdHJ1Y3Rpb24uZG9zZS5sb3cpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICArICctJyArIFRvU3RyaW5nKFRvUXVhbnRpdHkoZG9zYWdlSW5zdHJ1Y3Rpb24uZG9zZS5oaWdoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgKyBkb3NhZ2VJbnN0cnVjdGlvbi5kb3NlLmhpZ2gudW5pdC52YWx1ZQ0KICAgICAgICAgICAgZWxzZSBUb1N0cmluZyhUb1F1YW50aXR5KGRvc2FnZUluc3RydWN0aW9uLmRvc2UpKQ0KICAgICAgICApLA0KICAgICAgZnJlcXVlbmN5RGVzY3JpcHRpb246DQogICAgICAgIFRvU3RyaW5nKGRvc2FnZUluc3RydWN0aW9uLnRpbWluZy5yZXBlYXQuZnJlcXVlbmN5LnZhbHVlKSArDQogICAgICAgICAgQ29hbGVzY2UoDQogICAgICAgICAgICAnLScgKyBUb1N0cmluZyhkb3NhZ2VJbnN0cnVjdGlvbi50aW1pbmcucmVwZWF0LmZyZXF1ZW5jeU1heC52YWx1ZSksDQogICAgICAgICAgICAnJw0KICAgICAgICAgICkNCiAgICByZXR1cm4gew0KICAgICAgcnhOb3JtQ29kZTogcnhOb3JtQ29kZSwNCiAgICAgIGlzRHJhZnQ6IE8uc3RhdHVzLnZhbHVlID0gJ2RyYWZ0JywNCiAgICAgIC8vIE5PVEU6IEFzc3VtaW5nIGFzTmVlZGVkIGlzIGV4cHJlc3NlZCBhcyBhIGJvb2xlYW4NCiAgICAgIGlzUFJOOiBkb3NhZ2VJbnN0cnVjdGlvbi5hc05lZWRlZC52YWx1ZSwNCiAgICAgIHByZXNjcmlwdGlvbjoNCiAgICAgICAgaWYgZG9zYWdlSW5zdHJ1Y3Rpb24udGV4dCBpcyBub3QgbnVsbCB0aGVuDQogICAgICAgICAgbWVkaWNhdGlvbk5hbWUgKyAnICcgKyBkb3NhZ2VJbnN0cnVjdGlvbi50ZXh0LnZhbHVlDQogICAgICAgIGVsc2UNCiAgICAgICAgICAvLyBUT0RPOiBTaG91bGRuJ3QgbmVlZCB0aGUgLnZhbHVlIGhlcmUgb24gYXNOZWVkZWRCb29sZWFuDQogICAgICAgICAgbWVkaWNhdGlvbk5hbWUgKyAnICcgKyBkb3NlRGVzY3JpcHRpb24gKyAnIHEnICsgZnJlcXVlbmN5RGVzY3JpcHRpb24gKyAoaWYgZG9zYWdlSW5zdHJ1Y3Rpb24uYXNOZWVkZWQudmFsdWUgdGhlbiAnIFBSTicgZWxzZSAnJyksDQogICAgICAvLyBUT0RPOiBTaG91bGRuJ3QgbmVlZCB0aGUgVG9RdWFudGl0eSBoZXJlLi4uDQogICAgICBkb3NlOiBpZiBkb3NhZ2VJbnN0cnVjdGlvbi5kb3NlIGlzIEZISVIuUmFuZ2UNCiAgICAgICAgICAgICAgICB0aGVuIFRvUXVhbnRpdHkoZG9zYWdlSW5zdHJ1Y3Rpb24uZG9zZS5oaWdoKQ0KICAgICAgICAgICAgICAgIGVsc2UgVG9RdWFudGl0eShkb3NhZ2VJbnN0cnVjdGlvbi5kb3NlKSwNCiAgICAgIGRvc2VzUGVyRGF5OiBDb2FsZXNjZShPTVRLTG9naWMuVG9EYWlseShmcmVxdWVuY3ksIHBlcmlvZCksIDEuMCkNCiAgICB9DQoNCi8vIE1NRSAtIE1pbGxpZ3JhbSBNb3JwaGluZSBFcXVpdmFsZW50cyBhcyBhIGxpc3Qgb2YgdHVwbGVzOg0KLy8gTGlzdDxUdXBsZSB7IHJ4Tm9ybUNvZGU6IENvZGUsIGlzRHJhZnQgQm9vbGVhbiwgaXNQUk4gQm9vbGVhbiwgcHJlc2NyaXB0aW9uIFN0cmluZywgZGFpbHlEb3NlIFN0cmluZywgY29udmVyc2lvbkZhY3RvciBEZWNpbWFsLCBtbWUgU3lzdGVtLlF1YW50aXR5IH0+DQovLyBmdW5jdGlvbiBDYWxjdWxhdGVNTUVzKG1lZGljYXRpb25zIExpc3Q8VHVwbGUgeyByeE5vcm1Db2RlIENvZGUsIGRvc2VRdWFudGl0eSBTeXN0ZW0uUXVhbnRpdHksIGRvc2VzUGVyRGF5IERlY2ltYWwgfT4pOg0KZGVmaW5lIE1NRToNCiAgUHJlc2NyaXB0aW9ucyBQDQogICAgbGV0IG1tZTogU2luZ2xldG9uRnJvbShPTVRLTG9naWMuQ2FsY3VsYXRlTU1Fcyh7IHsgcnhOb3JtQ29kZTogUC5yeE5vcm1Db2RlLCBkb3NlUXVhbnRpdHk6IFAuZG9zZSwgZG9zZXNQZXJEYXk6IFAuZG9zZXNQZXJEYXkgfSB9KSkNCiAgICByZXR1cm4gew0KICAgICAgcnhOb3JtQ29kZTogUC5yeE5vcm1Db2RlLA0KICAgICAgaXNEcmFmdDogUC5pc0RyYWZ0LA0KICAgICAgaXNQUk46IFAuaXNQUk4sDQogICAgICBwcmVzY3JpcHRpb246IFAucHJlc2NyaXB0aW9uLA0KICAgICAgZGFpbHlEb3NlOiBtbWUuZGFpbHlEb3NlRGVzY3JpcHRpb24sDQogICAgICBjb252ZXJzaW9uRmFjdG9yOiBtbWUuY29udmVyc2lvbkZhY3RvciwNCiAgICAgIG1tZTogbW1lLm1tZQ0KICAgIH0NCiAgICBzb3J0IGJ5IGlmIGlzRHJhZnQgdGhlbiAwIGVsc2UgMSwgcnhOb3JtQ29kZS5jb2RlDQoNCi8vIFRPRE86IENhcHR1cmUgcHJvY2VzcyBkZWNpc2lvbnMgZm9yIE1NRSBjYWxjdWxhdGlvbg0KLy8gVG90YWxNTUUgLSBTdW0gb2YgYWxsIE1NRSBmb3IgY3VycmVudGx5IGFuZCBhYm91dC10by1iZSBwcmVzY3JpYmVkIG9waW9pZCBtZWRpY2F0aW9ucw0KZGVmaW5lIFRvdGFsTU1FOiBTeXN0ZW0uUXVhbnRpdHkgeyB2YWx1ZTogU3VtKE1NRSBNIHJldHVybiBNLm1tZS52YWx1ZSksIHVuaXQ6ICdtZy9kJyB9DQoNCmRlZmluZSBJc01NRTUwT3JNb3JlOiBUb3RhbE1NRSA+PSA1MCAnbWcvZCcNCg0KZGVmaW5lIGdldEluZGljYXRvcjoNCiAgICBpZiBJc01NRTUwT3JNb3JlDQogICAgICAgIHRoZW4gJ3dhcm5pbmcnDQogICAgZWxzZSAnc3VjY2VzcycNCg0KZGVmaW5lIGdldFN1bW1hcnk6DQogICAgaWYgSXNNTUU1ME9yTW9yZQ0KICAgICAgICB0aGVuICdIaWdoIHJpc2sgZm9yIG9waW9pZCBvdmVyZG9zZSAtICcNCiAgICAgICAgICAgICAgICAgKyBjYXNlIHdoZW4gVG90YWxNTUUudmFsdWUgPj0gOTANCiAgICAgICAgICAgICAgICAgICAgIHRoZW4gJ3RhcGVyIG5vdycNCiAgICAgICAgICAgICAgICAgICAgIGVsc2UgJ2NvbnNpZGVyIHRhcGVyaW5nJw0KICAgICAgICAgICAgICAgICAgIGVuZA0KICAgIGVsc2UgJ01NRSBpcyB3aXRoaW4gdGhlIHJlY29tbWVuZGVkIHJhbmdlLicNCg0KZGVmaW5lIGdldERldGFpbDoNCiAgICBpZiBJc01NRTUwT3JNb3JlDQogICAgICAgIHRoZW4gJ1RvdGFsIG1vcnBoaW5lIG1pbGxpZ3JhbSBlcXVpdmFsZW50IChNTUUpIGlzICcgKyBUb1N0cmluZyhUb3RhbE1NRSkgKyAnLiBUYXBlciB0byBsZXNzIHRoYW4gNTAuJw0KICAgIGVsc2UgJ1RvdGFsIG1vcnBoaW5lIG1pbGxpZ3JhbSBlcXVpdmFsZW50IChNTUUpIGlzICcgKyBUb1N0cmluZyhUb3RhbE1NRSkgKyAnLiBUaGlzIGZhbGxzIHdpdGhpbiB0aGUgYWNjZXB0ZWQgcmFuZ2UuJw0KDQpkZWZpbmUgUmVzdWx0czoNCiAgSXNNTUU1ME9yTW9yZSBNTUVPdmVyNTANCiAgcmV0dXJuIHsNCiAgICBtbWVPdmVyNTA6IE1NRU92ZXI1MCwNCiAgICB0aXRsZToNCiAgICAgIGlmIE1NRU92ZXI1MA0KICAgICAgdGhlbiAnSGlnaCByaXNrIGZvciBvcGlvaWQgb3ZlcmRvc2UgLSAnDQogICAgICAgICAgICArIGNhc2Ugd2hlbiBUb3RhbE1NRS52YWx1ZSA+PSA5MA0KICAgICAgICAgICAgICAgIHRoZW4gJ3RhcGVyIG5vdycNCiAgICAgICAgICAgICAgICBlbHNlICdjb25zaWRlciB0YXBlcmluZycNCiAgICAgICAgICAgICAgZW5kDQogICAgICBlbHNlICdNTUUgaXMgd2l0aGluIHRoZSByZWNvbW1lbmRlZCByYW5nZS4nLA0KICAgICAgZGVzY3JpcHRpb246DQogICAgICAgIGlmIE1NRU92ZXI1MA0KICAgICAgICB0aGVuICdUb3RhbCBtb3JwaGluZSBtaWxsaWdyYW0gZXF1aXZhbGVudCAoTU1FKSBpcyAnICsgVG9TdHJpbmcoVG90YWxNTUUpICsgJy4gVGFwZXIgdG8gbGVzcyB0aGFuIDUwLicNCiAgICAgICAgZWxzZSAnVG90YWwgbW9ycGhpbmUgbWlsbGlncmFtIGVxdWl2YWxlbnQgKE1NRSkgaXMgJyArIFRvU3RyaW5nKFRvdGFsTU1FKSArICcuIFRoaXMgZmFsbHMgd2l0aGluIHRoZSBhY2NlcHRlZCByYW5nZS4nDQogIH0NCg0KLyoNClVTQ29yZSBwcm9maWxlcyBvbmx5IHN1cHBvcnQgTWVkaWNhdGlvblJlcXVlc3QgYW5kIE1lZGljYXRpb25TdGF0ZW1lbnQsIHNhbWUgYXMgQXJnb25hdXQgRGF0YSBRdWVyeQ0KU2VlIHRoZSBEU1RVMiBMaWJyYXJ5IGZvciBtb3JlIGluZm9ybWF0aW9uDQoNClVTQ29yZSdzIE1lZGljYXRpb24gQ29kZSBpcyBib3VuZCB0bzoNCmh0dHA6Ly93d3cuaGw3Lm9yZy9maGlyL3VzL2NvcmUvVmFsdWVTZXQtdXMtY29yZS1tZWRpY2F0aW9uLWNvZGVzLmh0bWwNClRoZSBVU0NvcmUgTWVkaWNhdGlvblJlcXVlc3QgYW5kIE1lZGljYXRpb25TdGF0ZW1lbnQgcHJvZmlsZXMgZG8gbm90IHJlcXVpcmUgYW55IGRvc2FnZSBvciBmcmVxdWVuY3kgaW5mb3JtYXRpb24NCiovDQo="
    }
  ]
}